Index: backend/db/models/saving-goal/saving_goal.model.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module.exports = function(sequelize, DataTypes) {\r\n    return sequelize.define('savingGoal', {\r\n        id: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            primaryKey: true,\r\n            autoIncrement: true,\r\n            field: 'id'\r\n        },\r\n        goalName: {\r\n            type: DataTypes.STRING(50),\r\n            allowNull: false,\r\n            field: 'goal_name'\r\n        },\r\n        description: {\r\n            type: DataTypes.STRING(150),\r\n            allowNull: false,\r\n            field: 'description'\r\n        },\r\n        goalAmount: {\r\n            type: DataTypes.DECIMAL,\r\n            allowNull: false,\r\n            field: 'goal_amount'\r\n        },\r\n        totalAmount: {\r\n            type: DataTypes.DECIMAL,\r\n            allowNull: false,\r\n            field: 'total_amount'\r\n        },\r\n        complete: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            defaultValue: '1',\r\n            field: 'complete'\r\n        },\r\n        userId: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: true,\r\n            field: 'user_id'\r\n        },\r\n        startDate: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'start_date'\r\n        },\r\n        endDate: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'end_date'\r\n        },\r\n        createdAt: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'created_at'\r\n        },\r\n        status: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            defaultValue: '1',\r\n            field: 'status'\r\n        }\r\n    }, {\r\n        tableName: 'saving_goal',\r\n        timestamps: false\r\n    });\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/db/models/saving-goal/saving_goal.model.js b/backend/db/models/saving-goal/saving_goal.model.js
--- a/backend/db/models/saving-goal/saving_goal.model.js	(revision a8eb647b09416d0feac75458135fe2951da05301)
+++ b/backend/db/models/saving-goal/saving_goal.model.js	(date 1695602204943)
@@ -22,11 +22,6 @@
             allowNull: false,
             field: 'goal_amount'
         },
-        totalAmount: {
-            type: DataTypes.DECIMAL,
-            allowNull: false,
-            field: 'total_amount'
-        },
         complete: {
             type: DataTypes.INTEGER(11),
             allowNull: false,
@@ -34,10 +29,19 @@
             field: 'complete'
         },
         userId: {
-            type: DataTypes.INTEGER(11),
+            type: DataTypes.INTEGER,
             allowNull: true,
+            references: {
+                model: 'users',
+                key: 'id'
+            },
             field: 'user_id'
         },
+        totalAmount: {
+            type: DataTypes.DECIMAL,
+            allowNull: false,
+            field: 'total_amount'
+        },
         startDate: {
             type: DataTypes.DATE,
             allowNull: true,
Index: backend/db/examples/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const { categoryExpenseLib, savingsLib, usersLib, expensesLib,  } = require('../index')\r\n\r\nusersLib.findUserByUserName('dmarroquin').then(console.log)\r\n// usersLib.findUserById(2).then(console.log)\r\n// expensesLib.findAllExpense().then(console.log)\r\n// expensesLib.findExpenseByIdUser(3).then(console.log)\r\n// savingsLib.findSavingByIdUser(2).then(console.log)\r\n// categoryExpenseLib.findAllCategoryExpense().then(console.log)\r\n// categoryExpenseLib.findCategoryExpenseById(2).then(console.log)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/db/examples/index.js b/backend/db/examples/index.js
--- a/backend/db/examples/index.js	(revision a8eb647b09416d0feac75458135fe2951da05301)
+++ b/backend/db/examples/index.js	(date 1695602282331)
@@ -1,9 +1,10 @@
 const { categoryExpenseLib, savingsLib, usersLib, expensesLib,  } = require('../index')
 
-usersLib.findUserByUserName('dmarroquin').then(console.log)
+// usersLib.findUserByUserName('dmarroquin').then(console.log)
 // usersLib.findUserById(2).then(console.log)
 // expensesLib.findAllExpense().then(console.log)
 // expensesLib.findExpenseByIdUser(3).then(console.log)
 // savingsLib.findSavingByIdUser(2).then(console.log)
+savingsLib.findAllSavings().then(console.log)
 // categoryExpenseLib.findAllCategoryExpense().then(console.log)
 // categoryExpenseLib.findCategoryExpenseById(2).then(console.log)
Index: backend/db/libs/saving-goal/saving_goal.lib.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const {Op, Sequelize} = require('sequelize');\r\nconst dayjs = require('dayjs');\r\nconst models = require('../../models');\r\nconst { savingGoalModel } = models();\r\n\r\nmodule.exports = {\r\n    findAllSavings: async (where) => {\r\n        return savingGoalModel.findAll({\r\n            where: {...where}\r\n        })\r\n    },\r\n    findSavingByIdUser: async (userId) => {\r\n        try {\r\n            return await savingGoalModel.findOne({\r\n                attributes: ['id', 'goalName', 'goalAmount', 'userId'],\r\n                where: {userId},\r\n                raw: true\r\n            });\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    },\r\n    createOrUpdateSaving: async (model) => {\r\n        return new Promise(async (resolve, reject) => {\r\n            const instanceModel = model.id ? await savingGoalModel.findOne(\r\n                { where: { id: model.id }}).catch(reject) : null;\r\n            if ( instanceModel ) {\r\n                model.updatedAt = dayjs().format('YYYY-MM-DD HH:mm:ss');\r\n                savingGoalModel.update(model, { where: { id: instanceModel }})\r\n                    .then(() => resolve ({ ...instanceModel, model }))\r\n                    .catch((e = new Sequelize.UniqueConstraintError) => {\r\n                        e.message = 'Saving data must be unique'\r\n                        reject(e)\r\n                    }).catch(err => reject(err))\r\n            } else {\r\n                model.createdAt = dayjs().format('YYYY-MM-DD HH:mm:ss');\r\n                savingGoalModel.create(model).then(result => resolve(resolve))\r\n                    .catch((e = new Sequelize.UniqueConstraintError) => {\r\n                        e.message = 'Saving data must unique create'\r\n                        reject(e)\r\n                    }).catch(err => reject(err))\r\n            }\r\n        })\r\n    },\r\n    deleteSaving: async (model) => {\r\n        return new Promise( async (resolve, reject) => {\r\n            return savingGoalModel.update({\r\n                updatedAt: dayjs().format('YYYY-MM-DD hh:mm:ss'),\r\n                status: 0\r\n            }, {\r\n                where: {\r\n                    id: model.id\r\n                },\r\n                raw: true\r\n            }).then(result => {\r\n                if (result) {\r\n                    resolve(result)\r\n                } else {\r\n                    resolve(null)\r\n                }\r\n            }).catch(err => reject(err))\r\n        })\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/db/libs/saving-goal/saving_goal.lib.js b/backend/db/libs/saving-goal/saving_goal.lib.js
--- a/backend/db/libs/saving-goal/saving_goal.lib.js	(revision a8eb647b09416d0feac75458135fe2951da05301)
+++ b/backend/db/libs/saving-goal/saving_goal.lib.js	(date 1695602242894)
@@ -12,7 +12,7 @@
     findSavingByIdUser: async (userId) => {
         try {
             return await savingGoalModel.findOne({
-                attributes: ['id', 'goalName', 'goalAmount', 'userId'],
+                // attributes: ['id', 'goalName', 'goalAmount', 'userId'],
                 where: {userId},
                 raw: true
             });
Index: backend/db/models/category-expenses/category_expenses.model.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module.exports = function(sequelize, DataTypes) {\r\n    return sequelize.define('categoryExpense', {\r\n        id: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            primaryKey: true,\r\n            autoIncrement: true,\r\n            field: 'id'\r\n        },\r\n        name: {\r\n            type: DataTypes.STRING(50),\r\n            allowNull: false,\r\n            field: 'name'\r\n        },\r\n        type: {\r\n            type: DataTypes.STRING(20),\r\n            allowNull: false,\r\n            field: 'type'\r\n        },\r\n        createdAt: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'created_at'\r\n        },\r\n        updatedAt: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'updated_at'\r\n        },\r\n        status: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            defaultValue: '1',\r\n            field: 'status'\r\n        }\r\n    }, {\r\n        sequelize,\r\n        tableName: 'category_expense',\r\n        timestamps: false\r\n    });\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/db/models/category-expenses/category_expenses.model.js b/backend/db/models/category-expenses/category_expenses.model.js
--- a/backend/db/models/category-expenses/category_expenses.model.js	(revision a8eb647b09416d0feac75458135fe2951da05301)
+++ b/backend/db/models/category-expenses/category_expenses.model.js	(date 1695600953438)
@@ -34,6 +34,15 @@
             allowNull: false,
             defaultValue: '1',
             field: 'status'
+        },
+        idCreatorUser: {
+            type: DataTypes.INTEGER,
+            allowNull: true,
+            references: {
+                model: 'users',
+                key: 'id'
+            },
+            field: 'id_creator_user'
         }
     }, {
         sequelize,
Index: backend/db/models/expenses/expenses.model.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module.exports = function(sequelize, DataTypes) {\r\n    return sequelize.define('expenses', {\r\n        id: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            primaryKey: true,\r\n            autoIncrement: true,\r\n            field: 'id'\r\n        },\r\n        spentDate: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'spent_date'\r\n        },\r\n        description: {\r\n            type: DataTypes.STRING(100),\r\n            allowNull: false,\r\n            field: 'description'\r\n        },\r\n        amount: {\r\n            type: DataTypes.DECIMAL,\r\n            allowNull: false,\r\n            field: 'amount'\r\n        },\r\n        necessarySpent: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            defaultValue: '1',\r\n            field: 'necessary_spent'\r\n        },\r\n        userId: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: true,\r\n            field: 'user_id'\r\n        },\r\n        categoryId: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: true,\r\n            field: 'category_id'\r\n        },\r\n        createdAt: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'created_at'\r\n        },\r\n        updatedAt: {\r\n            type: DataTypes.DATE,\r\n            allowNull: true,\r\n            defaultValue: sequelize.fn('current_timestamp'),\r\n            field: 'updated_at'\r\n        },\r\n        status: {\r\n            type: DataTypes.INTEGER(11),\r\n            allowNull: false,\r\n            defaultValue: '1',\r\n            field: 'status'\r\n        }\r\n    }, {\r\n        tableName: 'expenses',\r\n        timestamps: false\r\n    });\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/db/models/expenses/expenses.model.js b/backend/db/models/expenses/expenses.model.js
--- a/backend/db/models/expenses/expenses.model.js	(revision a8eb647b09416d0feac75458135fe2951da05301)
+++ b/backend/db/models/expenses/expenses.model.js	(date 1695601188214)
@@ -30,13 +30,21 @@
             field: 'necessary_spent'
         },
         userId: {
-            type: DataTypes.INTEGER(11),
+            type: DataTypes.INTEGER,
             allowNull: true,
+            references: {
+                model: 'users',
+                key: 'id'
+            },
             field: 'user_id'
         },
         categoryId: {
-            type: DataTypes.INTEGER(11),
+            type: DataTypes.INTEGER,
             allowNull: true,
+            references: {
+                model: 'category_expense',
+                key: 'id'
+            },
             field: 'category_id'
         },
         createdAt: {
@@ -45,17 +53,17 @@
             defaultValue: sequelize.fn('current_timestamp'),
             field: 'created_at'
         },
-        updatedAt: {
-            type: DataTypes.DATE,
-            allowNull: true,
-            defaultValue: sequelize.fn('current_timestamp'),
-            field: 'updated_at'
-        },
         status: {
             type: DataTypes.INTEGER(11),
             allowNull: false,
             defaultValue: '1',
             field: 'status'
+        },
+        updatedAt: {
+            type: DataTypes.DATE,
+            allowNull: true,
+            defaultValue: sequelize.literal('CURRENT_TIMESTAMP'),
+            field: 'updated_at'
         }
     }, {
         tableName: 'expenses',
